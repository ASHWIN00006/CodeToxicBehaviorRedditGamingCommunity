# -*- coding: utf-8 -*-
"""reddit_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oOHfOOiM_YyYHjbDrc7lsy2gf3ANDtk0
"""

!pip install asyncpraw

#roosterteeth
import nest_asyncio
import asyncio
import asyncpraw
import pandas as pd
from datetime import datetime
from google.colab import userdata

# Apply nest_asyncio to avoid event loop issues
nest_asyncio.apply()

# Global Reddit instance
reddit = None

async def authenticate():
    """Authenticate Reddit API using stored credentials."""
    global reddit
    client_id = userdata.get("client_id")
    client_secret = userdata.get("client_secret")
    user_agent = userdata.get("user_agent")

    reddit = asyncpraw.Reddit(
        client_id=client_id,
        client_secret=client_secret,
        user_agent=user_agent
    )
    print("✅ Reddit API Authentication Ready!")
    return reddit

# Define the timeframe for data collection
start_date = datetime(2025, 1, 1).timestamp()
end_date = datetime(2025, 4, 9).timestamp()

async def gather_data(subreddit_name):
    """Gather submission (post) and comment data from the subreddit."""
    global reddit
    if reddit is None:
        reddit = await authenticate()

    print(f"📥 Collecting data from r/{subreddit_name} (01 Jan 2025 - 09 Apr 2025)...")

    try:
        subreddit = await reddit.subreddit(subreddit_name)
        data = []

        async for submission in subreddit.new(limit=1000):
            if not (start_date <= submission.created_utc <= end_date):
                continue  # Skip posts outside the date range

            try:
                await submission.load()
            except Exception:
                continue

            # 🔹 Add Submission Data (Each Submission is now included!)
            data.append({
                "subreddit": subreddit_name,
                "submission_id": submission.id,
                "parent_id": submission.id,  # Submission is its own parent
                "target_author": "",
                "comment_id": submission.id,  # Submission_id = comment_id for posts
                "source_author": submission.author.name if submission.author else "[deleted]",
                "created_utc": datetime.utcfromtimestamp(submission.created_utc).strftime('%Y-%m-%d %H:%M:%S'),
                "comment_score": "",  # No comment score for submissions
                "post_score": submission.score,
                "text": submission.selftext if submission.selftext else "",
                "title": submission.title
            })

            # Fetch and process comments
            try:
                await submission.comments.replace_more(limit=0)
            except Exception:
                continue

            comments = getattr(submission.comments, 'list', lambda: [])() or []
            for comment in comments:
                if not hasattr(comment, "body") or comment.body is None:
                    continue

                # Determine Parent-Child Relationship
                if comment.parent_id.startswith("t3_"):  # Top-Level Comment
                    target_author = submission.author.name if submission.author else "[deleted]"
                else:  # Nested Comment
                    try:
                        parent_comment = await reddit.comment(comment.parent_id.split("_")[1])
                        target_author = parent_comment.author.name if parent_comment.author else "[deleted]"
                    except Exception:
                        target_author = "[parent comment deleted]"

                # 🔹 Add Comment Data (Now Includes Parent-Child Logic!)
                data.append({
                    "subreddit": subreddit_name,
                    "submission_id": submission.id,
                    "parent_id": comment.parent_id.split("_")[1],  # Store actual ID
                    "target_author": target_author,
                    "comment_id": comment.id,
                    "source_author": comment.author.name if comment.author else "[deleted]",
                    "created_utc": datetime.utcfromtimestamp(comment.created_utc).strftime('%Y-%m-%d %H:%M:%S'),
                    "comment_score": comment.score,
                    "post_score": submission.score,
                    "text": comment.body,
                    "title": submission.title
                })

            await asyncio.sleep(2)  # Avoid API rate limits

    except Exception as e:
        print(f"❌ Error gathering data from r/{subreddit_name}: {e}")
        import traceback
        traceback.print_exc()

    await save_data(data, subreddit_name)

async def save_data(data, subreddit_name):
    """Save collected data to a CSV file."""
    if not data:
        print(f"⚠️ No data collected from r/{subreddit_name}")
        return

    df = pd.DataFrame(data)
    filename = f"{subreddit_name}_JanApr2025_cleaned.csv"
    df.to_csv(filename, index=False)
    print(f"✅ Data saved to {filename}")

async def main():
    await gather_data("roosterteeth")
    if reddit:
        await reddit.close()

if __name__ == "__main__":
    asyncio.run(main())

#redvsblue
import nest_asyncio
import asyncio
import asyncpraw
import pandas as pd
from datetime import datetime
from google.colab import userdata

# Apply nest_asyncio to avoid event loop issues
nest_asyncio.apply()

# Global Reddit instance
reddit = None

async def authenticate():
    """Authenticate Reddit API using stored credentials."""
    global reddit
    client_id = userdata.get("client_id")
    client_secret = userdata.get("client_secret")
    user_agent = userdata.get("user_agent")

    reddit = asyncpraw.Reddit(
        client_id=client_id,
        client_secret=client_secret,
        user_agent=user_agent
    )
    print("✅ Reddit API Authentication Ready!")
    return reddit

# Define the timeframe for data collection
start_date = datetime(2025, 1, 1).timestamp()
end_date = datetime(2025, 4, 15).timestamp()

async def gather_data(subreddit_name):
    """Gather submission (post) and comment data from the subreddit."""
    global reddit
    if reddit is None:
        reddit = await authenticate()

    print(f"📥 Collecting data from r/{subreddit_name} (01 Jan 2025 - 15 Apr 2025)...")

    try:
        subreddit = await reddit.subreddit(subreddit_name)
        data = []

        async for submission in subreddit.new(limit=1000):
            if not (start_date <= submission.created_utc <= end_date):
                continue  # Skip posts outside the date range

            try:
                await submission.load()
            except Exception:
                continue

            # 🔹 Add Submission Data (Each Submission is now included!)
            data.append({
                "subreddit": subreddit_name,
                "submission_id": submission.id,
                "parent_id": submission.id,  # Submission is its own parent
                "target_author": "",
                "comment_id": submission.id,  # Submission_id = comment_id for posts
                "source_author": submission.author.name if submission.author else "[deleted]",
                "text": submission.selftext if submission.selftext else "",
                "title": submission.title,
                "comment_score": "",  # No comment score for submissions
                "created_utc": datetime.utcfromtimestamp(submission.created_utc).strftime('%Y-%m-%d %H:%M:%S'),
                "date": datetime.utcfromtimestamp(submission.created_utc).strftime('%y.%m.%d'),
                "time": datetime.utcfromtimestamp(submission.created_utc).strftime('%H:%M:%S')

            })

            # Fetch and process comments
            try:
                await submission.comments.replace_more(limit=0)
            except Exception:
                continue

            comments = getattr(submission.comments, 'list', lambda: [])() or []
            for comment in comments:
                if not hasattr(comment, "body") or comment.body is None:
                    continue

                # Determine Parent-Child Relationship
                if comment.parent_id.startswith("t3_"):  # Top-Level Comment
                    target_author = submission.author.name if submission.author else "[deleted]"
                else:  # Nested Comment
                    try:
                        parent_comment = await reddit.comment(comment.parent_id.split("_")[1])
                        target_author = parent_comment.author.name if parent_comment.author else "[deleted]"
                    except Exception:
                        target_author = "[parent comment deleted]"

                # 🔹 Add Comment Data (Now Includes Parent-Child Logic!)
                data.append({
                    "subreddit": subreddit_name,
                    "submission_id": submission.id,
                    "parent_id": comment.parent_id.split("_")[1],  # Store actual ID
                    "target_author": target_author,
                    "comment_id": comment.id,
                    "source_author": comment.author.name if comment.author else "[deleted]",
                    "text": comment.body,
                    "title": submission.title,
                    "comment_score": comment.score,
                    "created_utc": datetime.utcfromtimestamp(comment.created_utc).strftime('%Y-%m-%d %H:%M:%S'),
                    "date": datetime.utcfromtimestamp(comment.created_utc).strftime('%y.%m.%d'),
                    "time": datetime.utcfromtimestamp(comment.created_utc).strftime('%H:%M:%S')

                })

            await asyncio.sleep(2)  # Avoid API rate limits

    except Exception as e:
        print(f"❌ Error gathering data from r/{subreddit_name}: {e}")
        import traceback
        traceback.print_exc()

    await save_data(data, subreddit_name)

async def save_data(data, subreddit_name):
    """Save collected data to a CSV file."""
    if not data:
        print(f"⚠️ No data collected from r/{subreddit_name}")
        return

    df = pd.DataFrame(data)
    filename = f"{subreddit_name}_JanApr025_cleaned.csv"
    df.to_csv(filename, index=False)
    print(f"✅ Data saved to {filename}")

async def main():
    await gather_data("redvsblue")
    if reddit:
        await reddit.close()

if __name__ == "__main__":
    asyncio.run(main())